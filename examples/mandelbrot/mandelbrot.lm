//This file contains the code used to compute the fractal itself. The values generated from here are then passed on to the renderer.

inline function pack(a, b, precision) {
    state = a + b*(2^precision);
}

inline function unpackB(packed, precision) {
    state = (packed - (packed % 2^precision)) / 2^precision;
}

inline function unpackA(packed, precision) {
    const b = unpackB(packed, precision);
    state = packed - b * 2^precision;
}

inline const pack_precision = 14;

//Computes one iteration.
export function i_t(x, y, c) {
    const cPoint = (c.x, unpackA(c.y, pack_precision));
    const iterations = unpackB(c.y, pack_precision);

    //If we've exceeded the maximum size, don't run any more iterations and just return the current value.
    if(cAbs(cPoint) >= max_size) {
        state = c;
    } else {
        //Run another iteration (z*z + x + yi) and increment the iteration count.
        //We store the iteration count in a point because desmos can only work with lists that have the same elements. The y-value of the point is not used.
        const newPoint = cAdd(cMul(cPoint, cPoint), (x, y));
        state = (newPoint.x, pack(newPoint.y, iterations+1, pack_precision));
    }
}

//Calculate the fractional iteration count.
export function f_rac(v) {
    const cPoint = (v.x, unpackA(v.y, pack_precision));
    const iterations = unpackB(v.y, pack_precision);

    state = iterations + 1 - log_2(log(cAbs(cPoint)));
}

//Find the iteration count for a point.
inline function calculate(x, y) {
    //Initialize it. The first number is the x-position, and the second is the y-position and iteration count packed together.
    state = (0, 0);

    //Run the iteration function on it for as many times as specififed.
    iterate!({
        state = i_t(x, y, state);
    }, ITERATIONS);
    
    //Turn the point and iteration count into a fractional iteration count.
    state = f_rac(state);
}

//Generates a set for a specific row.
inline function gSet(num) {
    //Loop through the image, divided by the number of splits we turn the image into (this creates a single split).
    state = range(1, width * height/get!(SPLITS)).map(idx => {
        //Get the x-position, centered at (0, 0).
        const x = conv_1d_2d_x(idx, width) - width/2;
        //Gets the y-position, centered at (0,0) and increased by the y-position of previous splits.
        const y = conv_1d_2d_y(idx, width) - height/2 + height*(num-1)/get!(SPLITS);
        
        //Calculate the iteration count.
        state = calculate(x/r_es + x_off, y/r_es + y_off);
    });
}