//This file contains the code used to color the fractal. It does this using a pre-computed gradient (see the arrays below) and lerping between gradient values to get smooth transitions.

//The way that Desmos works is that you can define a color array, then apply that color array to a polygon array of the same size. The first color will be used on the first polygon, second on the second polygon, and so on. This file creates that color array.

//Stores the colors used in the gradient.
export const c_olors1 = [66, 25, 9, 4, 0, 12, 24, 57, 134, 211, 241, 248, 255, 204, 153, 106];
export const c_olors2 = [30, 7, 1, 4, 7, 44, 82, 125, 181, 236, 233, 201, 170, 128, 87, 52];
export const c_olors3 = [15, 26, 47, 73, 100, 138, 177, 209, 229, 248, 191, 95, 0, 0, 0, 3];

//Generates the colors for a split using a set.
inline function gColor(num, set) {
    //Loop through the image, divided by the number of splits we turn the image into (this creates a single split).
    state = range(1, width * height/get!(SPLITS)).map(idx => {
        //Find the color index from the iteration count, by mapping from 0-iterations to  1-colors.
        const cIdx = map(0, get!(ITERATIONS), 1, length(c_olors1), set[idx]);
        
        //Find the colors above and below the index, as well as interpole value between them.
        const lower = floor(cIdx);
        const upper = ceil(cIdx);
        const amount = cIdx-floor(cIdx);
        
        //Lerp to find the r, g, and b values.
        const r = lerp(c_olors1[lower], c_olors1[upper], amount);
        const g = lerp(c_olors2[lower], c_olors2[upper], amount);
        const b = lerp(c_olors3[lower], c_olors3[upper], amount);
        
        //Construct a color.
        state = rgb(r, g, b);
    });
}