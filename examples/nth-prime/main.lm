export function p(n) {
    // First, we should determine an upper bound.
    // These are inclusive bounds.
    //
    // This is from Pierre Dusart's "Estimates of some functions over primes without RH."
    // at https://arxiv.org/abs/1002.0442
    // It gives p(n) < en(ln(n))
    // for n >= 2
    const upper = ceil(e * n * ln(n));

    // Now, we need to calculate the number.
    // We'll do this by counting the number of numbers
    // which have less than n primes below them.
    // This is based on Willans' formula for primes.
    //
    // The first prime is 2. We need to add 2 back as we
    // start at it.
    sum(num = 2; upper) {
        const numPrimesBelow = sum(bNum = 2; num) {
            isPrime(bNum)
        };

        numPrimesBelow < n
    } + 2
}
